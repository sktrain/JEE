package sk.train.model;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.4.10
 * 2024-01-27T19:00:43.690+01:00
 * Generated source version: 3.4.10
 *
 */
@WebServiceClient(name = "EmpWebServiceService",
                  wsdlLocation = "http://localhost:8080/Muster_JPA_EJB_WS_H2_v2/EmpWebService?wsdl",
                  targetNamespace = "http://ws.train.sk/")
public class EmpWebServiceService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://ws.train.sk/", "EmpWebServiceService");
    public final static QName EmpWebServicePort = new QName("http://ws.train.sk/", "EmpWebServicePort");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8080/Muster_JPA_EJB_WS_H2_v2/EmpWebService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(EmpWebServiceService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://localhost:8080/Muster_JPA_EJB_WS_H2_v2/EmpWebService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public EmpWebServiceService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public EmpWebServiceService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public EmpWebServiceService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public EmpWebServiceService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public EmpWebServiceService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public EmpWebServiceService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns EmpServiceIf
     */
    @WebEndpoint(name = "EmpWebServicePort")
    public EmpServiceIf getEmpWebServicePort() {
        return super.getPort(EmpWebServicePort, EmpServiceIf.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns EmpServiceIf
     */
    @WebEndpoint(name = "EmpWebServicePort")
    public EmpServiceIf getEmpWebServicePort(WebServiceFeature... features) {
        return super.getPort(EmpWebServicePort, EmpServiceIf.class, features);
    }

}
