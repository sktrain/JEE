package org.javacream;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;
import ws.javacream.org.samples.order.SimpleOrderWebService;

/**
 * This class was generated by Apache CXF 4.0.4
 * 2024-11-19T15:48:06.819+01:00
 * Generated source version: 4.0.4
 *
 */
@WebServiceClient(name = "OrderWebService",
                  wsdlLocation = "file:/E:/stephan/workspaces/eclipse_workspaces/JavaEE_2024/Muster_WS_Order_ContractFirst/OrderWebService.wsdl",
                  targetNamespace = "http://javacream.org")
public class OrderWebService extends Service {

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://javacream.org", "OrderWebService");
    public static final QName OrderServicePort = new QName("http://javacream.org", "OrderServicePort");
    static {
        URL url = null;
        try {
            url = new URL("file:/E:/stephan/workspaces/eclipse_workspaces/JavaEE_2024/Muster_WS_Order_ContractFirst/OrderWebService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(OrderWebService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/E:/stephan/workspaces/eclipse_workspaces/JavaEE_2024/Muster_WS_Order_ContractFirst/OrderWebService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public OrderWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public OrderWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OrderWebService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public OrderWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public OrderWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public OrderWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns SimpleOrderWebService
     */
    @WebEndpoint(name = "OrderServicePort")
    public SimpleOrderWebService getOrderServicePort() {
        return super.getPort(OrderServicePort, SimpleOrderWebService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link jakarta.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SimpleOrderWebService
     */
    @WebEndpoint(name = "OrderServicePort")
    public SimpleOrderWebService getOrderServicePort(WebServiceFeature... features) {
        return super.getPort(OrderServicePort, SimpleOrderWebService.class, features);
    }

}
