
package sk.train.generated;

import java.util.concurrent.Future;
import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.AsyncHandler;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.Response;
import jakarta.xml.ws.ResponseWrapper;


/**
 * This class was generated by the XML-WS Tools.
 * XML-WS Tools 4.0.2
 * Generated source version: 3.0
 * 
 */
@WebService(name = "HelloWorldIf", targetNamespace = "http://train.sk/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface HelloWorldIf {


    /**
     * 
     * @return
     *     returns jakarta.xml.ws.Response<sk.train.generated.SayDateasStringResponse>
     */
    @WebMethod(operationName = "sayDateasString")
    @RequestWrapper(localName = "sayDateasString", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateasString")
    @ResponseWrapper(localName = "sayDateasStringResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateasStringResponse")
    public Response<SayDateasStringResponse> sayDateasStringAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "sayDateasString")
    @RequestWrapper(localName = "sayDateasString", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateasString")
    @ResponseWrapper(localName = "sayDateasStringResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateasStringResponse")
    public Future<?> sayDateasStringAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SayDateasStringResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sayDateasString", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateasString")
    @ResponseWrapper(localName = "sayDateasStringResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateasStringResponse")
    public String sayDateasString();

    /**
     * 
     * @param arg0
     * @return
     *     returns jakarta.xml.ws.Response<sk.train.generated.SayHelloResponse>
     */
    @WebMethod(operationName = "sayHello")
    @RequestWrapper(localName = "sayHello", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayHello")
    @ResponseWrapper(localName = "sayHelloResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayHelloResponse")
    public Response<SayHelloResponse> sayHelloAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param arg0
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "sayHello")
    @RequestWrapper(localName = "sayHello", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayHello")
    @ResponseWrapper(localName = "sayHelloResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayHelloResponse")
    public Future<?> sayHelloAsync(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SayHelloResponse> asyncHandler);

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sayHello", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayHello")
    @ResponseWrapper(localName = "sayHelloResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayHelloResponse")
    public String sayHello(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @return
     *     returns jakarta.xml.ws.Response<sk.train.generated.SayDateResponse>
     */
    @WebMethod(operationName = "sayDate")
    @RequestWrapper(localName = "sayDate", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDate")
    @ResponseWrapper(localName = "sayDateResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateResponse")
    public Response<SayDateResponse> sayDateAsync();

    /**
     * 
     * @param asyncHandler
     * @return
     *     returns java.util.concurrent.Future<? extends java.lang.Object>
     */
    @WebMethod(operationName = "sayDate")
    @RequestWrapper(localName = "sayDate", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDate")
    @ResponseWrapper(localName = "sayDateResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateResponse")
    public Future<?> sayDateAsync(
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<SayDateResponse> asyncHandler);

    /**
     * 
     * @return
     *     returns sk.train.generated.LocalDateTime
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sayDate", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDate")
    @ResponseWrapper(localName = "sayDateResponse", targetNamespace = "http://train.sk/", className = "sk.train.generated.SayDateResponse")
    public LocalDateTime sayDate();

}
