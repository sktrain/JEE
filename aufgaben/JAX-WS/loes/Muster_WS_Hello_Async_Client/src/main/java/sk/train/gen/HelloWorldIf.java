package sk.train.gen;

import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.AsyncHandler;
import jakarta.xml.ws.RequestWrapper;
import jakarta.xml.ws.Response;
import jakarta.xml.ws.ResponseWrapper;
import java.util.concurrent.Future;

/**
 * This class was generated by Apache CXF 4.0.4
 * 2024-11-19T13:10:10.436+01:00
 * Generated source version: 4.0.4
 *
 */
@WebService(targetNamespace = "http://train.sk/", name = "HelloWorldIf")
@XmlSeeAlso({ObjectFactory.class})
public interface HelloWorldIf {

    @WebMethod(operationName = "sayDateasString")
    @RequestWrapper(localName = "sayDateasString", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateasString")
    @ResponseWrapper(localName = "sayDateasStringResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateasStringResponse")
    public Response<sk.train.gen.SayDateasStringResponse> sayDateasStringAsync()
;

    @WebMethod(operationName = "sayDateasString")
    @ResponseWrapper(localName = "sayDateasStringResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateasStringResponse")
    @RequestWrapper(localName = "sayDateasString", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateasString")
    public Future<?> sayDateasStringAsync(

        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<sk.train.gen.SayDateasStringResponse> asyncHandler
    );

    @WebMethod
    @RequestWrapper(localName = "sayDateasString", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateasString")
    @ResponseWrapper(localName = "sayDateasStringResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateasStringResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.lang.String sayDateasString()
;

    @WebMethod(operationName = "sayHello")
    @RequestWrapper(localName = "sayHello", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayHello")
    @ResponseWrapper(localName = "sayHelloResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayHelloResponse")
    public Response<sk.train.gen.SayHelloResponse> sayHelloAsync(

        @WebParam(name = "arg0", targetNamespace = "")
        java.lang.String arg0
    );

    @WebMethod(operationName = "sayHello")
    @ResponseWrapper(localName = "sayHelloResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayHelloResponse")
    @RequestWrapper(localName = "sayHello", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayHello")
    public Future<?> sayHelloAsync(

        @WebParam(name = "arg0", targetNamespace = "")
        java.lang.String arg0,
        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<sk.train.gen.SayHelloResponse> asyncHandler
    );

    @WebMethod
    @RequestWrapper(localName = "sayHello", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayHello")
    @ResponseWrapper(localName = "sayHelloResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayHelloResponse")
    @WebResult(name = "return", targetNamespace = "")
    public java.lang.String sayHello(

        @WebParam(name = "arg0", targetNamespace = "")
        java.lang.String arg0
    );

    @WebMethod(operationName = "sayDate")
    @RequestWrapper(localName = "sayDate", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDate")
    @ResponseWrapper(localName = "sayDateResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateResponse")
    public Response<sk.train.gen.SayDateResponse> sayDateAsync()
;

    @WebMethod(operationName = "sayDate")
    @ResponseWrapper(localName = "sayDateResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateResponse")
    @RequestWrapper(localName = "sayDate", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDate")
    public Future<?> sayDateAsync(

        @WebParam(name = "asyncHandler", targetNamespace = "")
        AsyncHandler<sk.train.gen.SayDateResponse> asyncHandler
    );

    @WebMethod
    @RequestWrapper(localName = "sayDate", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDate")
    @ResponseWrapper(localName = "sayDateResponse", targetNamespace = "http://train.sk/", className = "sk.train.gen.SayDateResponse")
    @WebResult(name = "return", targetNamespace = "")
    public sk.train.gen.LocalDateTime sayDate()
;
}
